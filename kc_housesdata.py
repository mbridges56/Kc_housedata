# -*- coding: utf-8 -*-
"""LR1 - micah bridges

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FnhVi5aK7HUpgmYcbS4gpOBrYlWGs7Si
"""

#import all libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

#import data set form file
df = pd.read_csv("kc_house_data.csv")
df.head()

#asigns x and y axises values
x = df[["sqft_living15"]]
type(x)

y = df[["price"]]
type(y)

#plots the data set as a scatter plot
plt.scatter(x,y)
plt.ticklabel_format(axis="y",style="plain")

#import data from scikit learn
from sklearn.model_selection import train_test_split
#split data from test and train
x_train,x_test,y_train,y_test = train_test_split(x,y,train_size=0.2,random_state=0)
#import linear regression model
from sklearn.linear_model import LinearRegression
#fit the model
ir = LinearRegression()
ir.fit(x_train,y_train)

#predict the test values
y_pred = ir.predict(x_test)
#prints the intercept and coefficient
print('intercept of the model:',ir.intercept_)
print('coefficient of the line:',ir.coef_)

#importing metrics and then printing answers for errors
from sklearn import metrics
print('mean absolute error:', metrics.mean_absolute_error(y_test, y_pred))
print('mean squared error:', metrics.mean_squared_error(y_test,y_pred))
print('root mean squared error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

#solves for r squared
print('r squared:', metrics.r2_score(y_test,y_pred))

#plotting the error
c = [i for i in range(1,len(y_test)+1,1)]
plt.plot(c,y_test-y_pred,color = 'green',linestyle='-')
plt.xlabel('square footage')
plt.ylabel('error')
plt.title('error values')

#plotting the actual vs predicted values
a = [i for i in range (1,len(y_test)+1,1)]
plt.plot(a,y_test,color='r',linestyle='-')
plt.plot(a,y_pred,color='g',linestyle='-')
plt.xlabel('saquare footage')
plt.ylabel('price')
plt.title('prediction')
plt.show()
